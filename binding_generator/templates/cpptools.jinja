## Author: Christoph Lassner.
{% macro render_types(types) %}

@   for type in types
              {{type}}{%if loop.index != types|length%},{%endif%}

@   endfor
{%- endmacro %}

{% macro render_template_params(class, for_soil=False, as_declaration=False) -%}
{%- if not class.ClassType.TemplateParams is none -%}
{%-   if class.ClassType.TemplateParams | length > 0 -%}
{%- if as_declaration -%}
template {% endif -%}
<
{%-     if for_soil and not class.ExclusiveSoilUsage is none -%}
{%-       for tname in class.ExclusiveSoilUsage.Types -%}
{{ tname }}{% if loop.index != class.ClassType.TemplateParams | length %},{% endif %}
{%-       endfor -%}
{%-    else -%}
{%-       for tname in class.ClassType.TemplateParams -%}
{%- if as_declaration -%}typename {% endif-%}{{ tname }}{% if loop.index != class.ClassType.TemplateParams | length %},{% endif %}
{%-       endfor -%}
{%-     endif -%}
>
{%-   endif -%}
{%- endif -%}
{%- endmacro %}

{% macro render_function_template_params(func, for_soil=False) -%}
{%- if not func.TemplateArguments is none -%}
{%-   if func.TemplateArguments | length > 0 -%}
<
{%-     if for_soil and func.ExclusiveSoilUsage and not func.ExclusiveSoilUsage is none -%}
{{ func.ExclusiveSoilUsage.Types | join(",") }}
{%-    else -%}
{%-       for tname in func.TemplateArguments -%}
{{ tname }}{% if loop.index != func.TemplateArguments | length %},{% endif %}
{%-       endfor -%}
{%-     endif -%}
>
{%-   endif -%}
{%- endif -%}
{%- endmacro %}

{% macro render_arguments(function,
                          render_types=True,
                          render_defaults=True,
                          render_name=True,
                          default_wrap_start="",
                          default_wrap_end="",
                          up_to=-1,
                          qualified=False,
                          as_c_types=False,
                          vec_subst=False,
                          template_params=None,
                          instantiation_types=None,
                          for_soil=False) %}
## Renders function arguments.

{% set defaults_started=False %}
{% if up_to == -1 %}
{%   set up_to = function.Arguments | length %}
{% endif %}
@ for argument in function.Arguments[:up_to]
        {% if not argument.defaultvalue is none and not defaults_started -%}
{{default_wrap_start}}
{%- set defaults_started=True -%}
{%- endif -%}
{%- if render_types -%}
{%-   if as_c_types -%}
{{ argument.type.getCType(template_params=template_params, instantiation_types=instantiation_types) }} 
{%-   else -%}
{%-     if for_soil and not instantiation_types is none -%}
{{ argument.type.render(instantiation_types=instantiation_types, template_params=template_params) }}
{%-     else -%}
{{ argument.typestring }} 
{%-     endif -%}
{%-   endif -%}
{%- endif -%}
{%- if render_name %} {{ argument.name }}{%- endif -%}
{%- if render_defaults and not argument.defaultvalue is none -%}
={{ argument.defaultvalue }}
{%- endif -%}
{%- if loop.index != up_to -%},{%- endif -%}
{%- if loop.index == up_to and defaults_started -%}
{{default_wrap_end}}
{%- endif %}

@ endfor
{% endmacro %}

{% macro render_converters_tocpp(from,
                                 arguments,
                                 ret_list,
                                 instantiation_types=None,
                                 template_params=None) %}
@ for argument in arguments
@   if argument.type.needsConversion()
{{ argument.type.renderConversionCode(from, argument.name, instantiation_types, template_params) }}
@     if ret_list.append('__converted_'+argument.name)
@     endif
@   else
@     if ret_list.append(argument.name)
@     endif
@   endif
@ endfor
{% endmacro %}