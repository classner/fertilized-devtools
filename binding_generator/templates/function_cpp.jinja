## Author: Christoph Lassner.
{% include 'cpp_disclaimer.jinja' %}
{% import 'matlabtools.jinja' as matlabtools %}
{% import 'cpptools.jinja' as cpptools %}

#include "../global.h"
#include "../matlab_headers/global.h"

#include <vector>

#include <mex.h>

#include "../matlab_headers/__functions_{{ package|lower }}.h"
#include <fertilized/fertilized.h>

using namespace fertilized;

@   if 'Matlab' in m.AvailableIn
    ## Create methods of form: _ReturnType MethodName(Arguments);
@     if m.SupportedTypes is none or m.SupportedTypes | length == 0
      ## generate a no argument method!
{{ m.ReturnType.getCType(is_return_type=True) }} {{ m.NameFormat|format(m.FunctionPrefix, "") }} ({{ cpptools.render_arguments(m, render_defaults=False, as_c_types=True) }}) {
  // From C types conversions.
@         set convarglist = []
{{ cpptools.render_converters_tocpp('Matlab', m.Arguments, convarglist) }}
#pragma warning( push )
#pragma warning( disable : 4800 )
  // Get the libraries' result.
  auto libfunc_result = {{m.FunctionPrefix}}(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
          );
#pragma warning( pop ) 
@         if m.ReturnType.needsConversion():
  // Result conversion.
{{ m.ReturnType.renderConversionCode('Matlab', None) }}
  return __converted_return_value;
@         else
  return libfunc_result;
@         endif
}
@     else
@       for t in m.SupportedTypes	
@         set suffix = "_" + t.TypesString
{{ m.ReturnType.getCType(is_return_type=True) }} {{ m.NameFormat|format("", suffix) }} ({{ cpptools.render_arguments(m, render_defaults=False, as_c_types=True) }}) {
  // From C types conversions.
@         set convarglist = []
{{ cpptools.render_converters_tocpp('Matlab', m.Arguments, convarglist) }}
#pragma warning( push )
#pragma warning( disable : 4800 )
  // Get the libraries' result.
  auto libfunc_result = {{m.FunctionPrefix}}<{{cpptools.render_types(t.Types)}}>(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
          );
#pragma warning( pop )
@         if m.ReturnType.needsConversion():
  // Result conversion.
{{ m.ReturnType.renderConversionCode('Matlab', None, t) }}
  return __converted_return_value;
@         else
  return libfunc_result;
@         endif
}

@       endfor
@     endif
@	endif