## Author: Christoph Lassner.
{% include 'cpp_disclaimer.jinja' %}
{% import 'cpptools.jinja' as cpptools %}

#include "../global.h"
#include "../matlab_headers/__{{ package|lower }}.h"
#include <{{class.DefiningHeader|replace('../fertilized/', 'fertilized/')}}>

using namespace fertilized;


@ for m in class.Methods
@   if 'Matlab' in m.AvailableIn
        ## Create methods of form: _ReturnType MethodName(Arguments);		
@     if class.ClassType.TemplateParams is none or class.ClassType.TemplateParams|length == 0
        ## generate a no argument method!
{{ m.ReturnType.getCType(is_return_type=True) }} {{m.prefixForMatlab(m.FunctionPrefix)}}{{ m.NameFormat|format(class.ClassName, "") }} ({%if not m.IsConstructor %}void *__instance{%if m.Arguments|length > 0%},{%endif%}{%endif%}{{ cpptools.render_arguments(m, render_defaults=False, as_c_types=True) }}) {
@ if not m.IsConstructor
  // Unpack instance.
  auto __instance_unpacked = *static_cast<{{class.ClassType.render()}}*>(__instance);
@ endif
  // From C types conversions.
@         set convarglist = []
{{ cpptools.render_converters_tocpp('Matlab', m.Arguments, convarglist) }}
#########################
#pragma warning( push )
#pragma warning( disable : 4800 )
  // Get the libraries' result.
@         if m.IsConstructor
  auto *libfunc_result = new {{class.ClassType.render()}}(
    new {{ class.ClassName }}(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
          ));
@         else
  {% if m.ReturnType.TypeString != 'void' %}auto libfunc_result = {% endif %}__instance_unpacked -> {{m.FunctionPrefix}}(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
  );
@         endif
#pragma warning( pop )
#########################
@         if m.IsConstructor
  void *__converted_return_value = reinterpret_cast<void*>(libfunc_result);
  return __converted_return_value;
@         else
@           if m.ReturnType.TypeString != 'void'
@             if m.ReturnType.needsConversion():
  // Result conversion.
{{ m.ReturnType.renderConversionCode('Matlab', None) }}
  return __converted_return_value;
@             else
  return libfunc_result;
@             endif
@           endif
@         endif
}
@     else
@       set t = instantiation_types
        ## generate a method with template arguments (for each of the supported types)
        {% set suffix = "_" + t.TypesString %}
  {{ m.ReturnType.getCType() }} {{m.prefixForMatlab(m.FunctionPrefix)}}{{ m.NameFormat|format(class.ClassName, suffix) }} ({%if not m.IsConstructor %}void *__instance{%if m.Arguments|length > 0%},{%endif%}{%endif%}{{ cpptools.render_arguments(m, render_defaults=False, as_c_types=True, template_params=class.ClassType.TemplateParams, instantiation_types=t) }}) {
@ if not m.IsConstructor
  // Unpack instance.
  auto __instance_unpacked = *static_cast<{{class.ClassType.render(t)}}*>(__instance);
@ endif
  // From C types conversions.
@         set convarglist = []
{{ cpptools.render_converters_tocpp('Matlab', m.Arguments, convarglist, t, class.ClassType.TemplateParams) }}
#pragma warning( push )
#pragma warning( disable : 4800 )
  // Get the libraries' result.
@         if m.IsConstructor
  auto *libfunc_result = new {{class.ClassType.render(t)}}(
    new {{ class.ClassName }}<{{cpptools.render_types(t.Types)}}>(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
          ));
@         else
  {% if m.ReturnType.TypeString != 'void' %}auto libfunc_result = {% endif %}__instance_unpacked -> {{m.FunctionPrefix}}(
@           for convargname in convarglist
          {{ convargname }}{% if loop.index != convarglist | length %},{% endif %}

@           endfor
  );
@         endif
#pragma warning( pop )
##########################
@         if m.IsConstructor
  void *__converted_return_value = reinterpret_cast<void*>(libfunc_result);
  return __converted_return_value;
@         else
@           if m.ReturnType.TypeString != 'void'
@             if m.ReturnType.needsConversion():
  // Result conversion.
{{ m.ReturnType.renderConversionCode('Matlab', None, t) }}
  return __converted_return_value;
@             else
  return libfunc_result;
@             endif
@           endif
@         endif
}		
@     endif
@   endif
@ endfor

// Destructor.
@ if class.ClassType.TemplateParams is none or class.ClassType.TemplateParams|length == 0
void delete_{{class.ClassName}}(void *ptr) {
  auto * storage = static_cast<{{class.ClassType.render()}}*>(ptr);
  delete storage;
}
@ else
void delete_{{class.ClassName}}_{{instantiation_types.TypesString}}(void *ptr) {
  auto * storage = static_cast<{{class.ClassType.render(instantiation_types)}}*>(ptr);
  delete storage;
}
@ endif